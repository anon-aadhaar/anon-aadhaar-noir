mod tests {
    use crate::aadhar_qr_verifier;
    use crate::MAX_DATA_LENGTH;

    #[test]
    fn test_aadhar_qr_verifier() {
        let signature_limbs = [
            0xfb3edc946dc68a938edcfaf2a2189a,
            0xef557526c4432f9867ebbdd1e8c6b0,
            0xeb5ae2d4eb6f0d9c11618d88d23215,
            0x3a60181d2bde77838aea34ea479b17,
            0x9b6c60b2207a58605a50014bc5f6bc,
            0x8962bad2d255a10538d5bacc94514a,
            0x1a80556c2a92144aacb146c9b327cc,
            0x473bce9c0a2657f3707236787a12bf,
            0x8623661ed47d1f3c953a6df90ba063,
            0xb2cf931396cda375266f365c4e62e2,
            0xf9d7f2a494928b6d877f63ac58fb1f,
            0x578f826550167a7055bf1148514e5d,
            0x58bd16355967663850c07f65707055,
            0x8fefcd57f8961cfcc2abb54411243d,
            0xa4e0fb8fb9d231c574e24fa659a320,
            0x8505005c48098dea541c62eedcbe77,
            0xd3205be072f41c82b41bfaeaf5a9b1,
            0xbd,
        ];

        // Modulus limbs
        let modulus_limbs = [
            0xc203e52bab9c3474f4e2af0cdd32a3,
            0x5ea0a20c45685f9c9c13539274d23d,
            0xe3d04fdfa0d2904ea659a61236ff47,
            0x6ec6b746ae80ae86db80bd611e582f,
            0xd452bd25cd74460ba722b5bfc9d51f,
            0xe4e9187fd8b8631cebd31052f34a23,
            0x6b1712a73b0053ea378dda115c1078,
            0x4bfae172f59b06f546a33d679fafe4,
            0xaabde4a74da86399f808de9bc7d74a,
            0x303f1317c7c92d411657f8b5d633cf,
            0x647ff49b62c4bf3e48a69a8aeb1b0,
            0x4c126c91b72739c099fcba335a2536,
            0xf9300ac75a98e72ee5ada3b94b92a0,
            0xa80ee8d624a38b77ca6359e58d1567,
            0xc3def8ee6984d321397348a9f57c9c,
            0xa8428a535217236dcf092f02f901a1,
            0x7553a1675dc35856972e047cbfbee3,
            0xdf,
        ];

        // REDC parameters
        let redc_limbs = [
            0xe9b7d9b7aed73890bf46ea1008899e,
            0xc3bfe7fc89c5cd5acd74b34ead861b,
            0x62f86fa968fdb2a25d47a7ef4582fa,
            0x3da93e33e5638a41eb991e05417e49,
            0xfbc60d7d8e1af752bff9deb9e849ab,
            0xf46388bbd0a7e2e28ad8d42314e9ad,
            0x60fa2f1856e851b6db271aab0d7ce7,
            0xf92617c7ea0831370b732425706298,
            0x2949a1cfc5a7488d3bdc7a78e43b04,
            0xb8c1929359e54baad0a376e7632f66,
            0x4bb5e042e3b35451a4678b8dce2e89,
            0xdecddc58324aadc7529ca3f2cf399a,
            0x7237729ef3e84b300cb0d529ccdcc5,
            0x7600a5f9811701e596f77f90ed93c8,
            0xc4ced29a55637207e77740a615a8e3,
            0x287678e88ae8eec1d485fe93aebde,
            0x7d95fcc7eca379615ac76f1c21c897,
            0x1254,
        ];

        let signed_data_length = 1152;

        let signed_qr_data = [
            86, 50, 255, 51, 255, 50, 54, 57, 55, 50, 48, 49, 57, 48, 51, 48, 56, 49, 49, 52, 52,
            48, 55, 52, 51, 55, 255, 83, 117, 109, 105, 116, 32, 75, 117, 109, 97, 114, 255, 48, 49,
            45, 48, 49, 45, 49, 57, 56, 52, 255, 77, 255, 67, 47, 79, 32, 73, 115, 104, 119, 97,
            114, 32, 67, 104, 97, 110, 100, 255, 69, 97, 115, 116, 32, 68, 101, 108, 104, 105, 255,
            255, 66, 45, 51, 49, 44, 32, 51, 114, 100, 32, 70, 108, 111, 111, 114, 255, 255, 49, 49,
            48, 48, 53, 49, 255, 75, 114, 105, 115, 104, 110, 97, 32, 78, 97, 103, 97, 114, 255, 68,
            101, 108, 104, 105, 255, 82, 97, 100, 104, 101, 121, 32, 83, 104, 121, 97, 109, 32, 80,
            97, 114, 107, 32, 69, 120, 116, 101, 110, 115, 105, 111, 110, 255, 71, 97, 110, 100,
            104, 105, 32, 78, 97, 103, 97, 114, 255, 75, 114, 105, 115, 104, 110, 97, 32, 78, 97,
            103, 97, 114, 255, 49, 50, 51, 52, 255, 255, 79, 255, 81, 0, 47, 0, 0, 0, 0, 0, 60, 0,
            0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            3, 7, 1, 1, 7, 1, 1, 7, 1, 1, 255, 82, 0, 12, 2, 0, 0, 1, 1, 5, 4, 4, 0, 0, 255, 92, 0,
            35, 66, 111, 24, 110, 234, 110, 234, 110, 188, 103, 0, 103, 0, 102, 226, 95, 76, 95, 76,
            95, 100, 72, 3, 72, 3, 72, 69, 79, 210, 79, 210, 79, 97, 255, 100, 0, 34, 0, 1, 67, 114,
            101, 97, 116, 101, 100, 32, 98, 121, 58, 32, 74, 74, 50, 48, 48, 48, 32, 118, 101, 114,
            115, 105, 111, 110, 32, 52, 46, 49, 255, 144, 0, 10, 0, 0, 0, 0, 2, 236, 0, 1, 255, 82,
            0, 12, 2, 0, 0, 1, 1, 5, 4, 4, 0, 0, 255, 147, 255, 145, 0, 4, 0, 0, 195, 235, 5, 4, 11,
            128, 38, 166, 255, 145, 0, 4, 0, 1, 192, 249, 65, 128, 16, 124, 55, 255, 145, 0, 4, 0,
            2, 192, 249, 65, 0, 14, 175, 255, 145, 0, 4, 0, 3, 195, 238, 4, 131, 237, 4, 131, 232,
            8, 15, 61, 227, 128, 14, 78, 244, 198, 10, 190, 128, 74, 255, 145, 0, 4, 0, 4, 192, 30,
            10, 3, 229, 7, 0, 240, 64, 15, 157, 12, 56, 206, 16, 124, 255, 145, 0, 4, 0, 5, 192,
            120, 40, 7, 196, 14, 1, 224, 128, 16, 128, 16, 144, 102, 15, 55, 255, 145, 0, 4, 0, 6,
            195, 235, 15, 131, 232, 29, 7, 202, 36, 35, 123, 119, 32, 21, 133, 220, 173, 123, 29,
            124, 190, 51, 158, 143, 0, 4, 234, 216, 145, 15, 189, 91, 82, 210, 45, 90, 170, 52, 34,
            209, 158, 13, 108, 213, 78, 158, 137, 255, 145, 0, 4, 0, 7, 192, 56, 56, 15, 132, 112,
            35, 164, 155, 1, 61, 240, 240, 232, 42, 148, 255, 145, 0, 4, 0, 8, 192, 49, 32, 29, 20,
            7, 59, 113, 163, 24, 138, 108, 156, 26, 255, 145, 0, 4, 0, 9, 193, 241, 27, 135, 206,
            122, 15, 144, 184, 25, 25, 211, 9, 237, 209, 173, 196, 150, 111, 25, 246, 238, 110, 167,
            245, 97, 24, 144, 213, 187, 170, 6, 133, 23, 21, 199, 31, 204, 1, 35, 171, 39, 5, 127,
            48, 209, 141, 130, 143, 72, 200, 150, 233, 85, 241, 55, 128, 173, 216, 49, 52, 216, 139,
            110, 91, 225, 30, 109, 204, 188, 146, 157, 214, 18, 87, 32, 89, 157, 101, 246, 187, 223,
            117, 50, 62, 81, 65, 205, 126, 255, 145, 0, 4, 0, 10, 160, 28, 48, 34, 126, 189, 171,
            105, 217, 255, 145, 0, 4, 0, 11, 160, 58, 48, 35, 137, 175, 61, 198, 184, 255, 145, 0,
            4, 0, 12, 199, 200, 222, 62, 71, 240, 248, 106, 128, 111, 222, 255, 137, 22, 12, 202,
            78, 23, 233, 116, 114, 125, 113, 100, 226, 16, 241, 69, 36, 122, 23, 17, 120, 240, 5,
            127, 168, 109, 250, 155, 59, 7, 206, 127, 108, 18, 105, 216, 235, 32, 159, 93, 175, 208,
            238, 70, 166, 172, 160, 62, 58, 51, 254, 8, 55, 97, 246, 138, 129, 137, 16, 33, 165,
            205, 22, 186, 92, 163, 108, 70, 25, 168, 130, 96, 162, 13, 106, 78, 71, 254, 89, 108,
            233, 225, 39, 97, 63, 17, 13, 42, 95, 0, 30, 0, 130, 28, 154, 5, 162, 1, 51, 178, 125,
            65, 235, 47, 162, 24, 112, 152, 119, 13, 83, 212, 102, 84, 248, 36, 193, 63, 193, 101,
            254, 213, 80, 59, 106, 79, 74, 170, 227, 110, 2, 204, 201, 182, 60, 114, 60, 65, 195,
            148, 232, 145, 30, 46, 232, 19, 28, 159, 29, 153, 101, 206, 162, 28, 108, 80, 229, 255,
            145, 0, 4, 0, 13, 128, 255, 145, 0, 4, 0, 14, 128, 255, 145, 0, 4, 0, 15, 195, 224, 188,
            135, 193, 127, 15, 134, 196, 158, 62, 204, 245, 173, 53, 224, 68, 102, 215, 173, 58,
            244, 81, 11, 131, 110, 245, 166, 156, 166, 215, 76, 158, 156, 10, 170, 148, 182, 60,
            115, 173, 176, 16, 1, 15, 169, 187, 111, 38, 226, 185, 241, 97, 88, 34, 140, 218, 123,
            203, 88, 112, 88, 143, 74, 108, 17, 106, 37, 69, 149, 69, 151, 215, 37, 209, 201, 125,
            81, 117, 124, 102, 108, 252, 251, 26, 14, 104, 229, 35, 22, 219, 199, 180, 110, 24, 47,
            126, 104, 141, 232, 237, 115, 47, 31, 176, 190, 111, 243, 116, 185, 32, 185, 121, 57,
            59, 197, 65, 61, 233, 98, 18, 172, 235, 82, 146, 150, 241, 30, 186, 172, 161, 155, 148,
            171, 212, 237, 170, 123, 85, 177, 76, 132, 230, 38, 114, 51, 254, 36, 37, 236, 202, 21,
            44, 48, 203, 191, 154, 22, 219, 13, 67, 28, 214, 71, 72, 63, 173, 24, 137, 62, 141, 14,
            123, 11, 237, 106, 219, 68, 40, 62, 29, 255, 145, 0, 4, 0, 16, 128, 255, 145, 0, 4, 0,
            17, 128, 255, 217, 235, 89, 152, 53, 59, 33, 186, 193, 56, 29, 117, 14, 31, 162, 102,
            65, 224, 150, 175, 57, 29, 17, 95, 173, 173, 212, 123, 244, 250, 47, 255, 139, 96, 54,
            34, 219, 243, 92, 100, 240, 182, 255, 21, 167, 91, 244, 127, 53, 165, 180, 223, 131,
            221, 184, 74, 53, 233, 255, 238, 30, 166, 5, 157, 243, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 35, 136,
        ];

        let mut msg_vector: BoundedVec<u8, MAX_DATA_LENGTH> = BoundedVec::new();

        for i in 0..signed_qr_data.len() {
            msg_vector.push(signed_qr_data[i]);
        }

        let delimiter =
            [2, 4, 26, 38, 49, 51, 68, 79, 80, 96, 97, 104, 118, 124, 152, 165, 179, 184];
        let nullifierSeed: Field = 12345678; // Example seed
        let signalHash = 10;

        let outputs = aadhar_qr_verifier(
            msg_vector,
            signed_data_length,
            delimiter,
            signature_limbs,
            modulus_limbs,
            redc_limbs,
            true,
            true,
            true,
            true,
            nullifierSeed,
            signalHash,
        );

        // all of these result values are extracted from circom codebase.
        assert(outputs.age, "Age should be above 18");
        assert(outputs.gender == 77, "M as Ascii");
        assert(outputs.pinCode == 110051, "Pincode should be 110051");
        assert(outputs.state == 452723500356, "State should be 452723500356");
        assert(outputs.timestamp == 1552023000, "Timestamp should be 1552023000");
    }
}

